/**
 *                  NodeJS
 * - Phát triển 2009
 * - Nó làm được gì:
 *      + Websocket Server
 *      + Upload file clients
 *      + Máy chủ quảng cáo (Ad server)
 *      + Dịch vụ đám mây (cloud service)
 *      + Nhiều dịch vụ nhỏ
 *      +  xây dụng API
 * 
 * - Đặc điểm:
 *      +Không đa luồng
 */
  ------------------------Phím tắt hỗ trợ-------------------------------------------


 ------------------------Command Line-------------------------------------------
- dir
- cd
- mkdir
- echo ghi 1 file

------------------------------Funtion-------------------------------------

Là một hàm có thể có tên hoặc không có tên.
- cho phép thay đổi ngữ cảnh
- làm việc với đối tượng mới nhanh chóng
-tham số của call là các số , , ,
- còn của apply là mảng []

Tái sử dụng các đoạn mã

------------------------------First -class Funtion-------------------------------------

- Là một hàm được sử dụng như object
- cho phép thay đổi ngữ cảnh
- làm việc với đối tượng mới nhanh chóng
-tham số của call là các số , , ,
- còn của apply là mảng []

- Trong JavaScript hàmcó thể :
- cho phép thay đổi ngữ cảnh
- làm việc với đối tượng mới nhanh chóng
-tham số của call là các số , , ,
- còn của apply là mảng []
        + Làm tham số của hàm
        - cho phép thay đổi ngữ cảnh
        - làm việc với đối tượng mới nhanh chóng
        -tham số của call là các số , , ,
        - còn của apply là mảng []
        + giá trị trả về của một hàm
        - cho phép thay đổi ngữ cảnh
        - làm việc với đối tượng mới nhanh chóng
        -tham số của call là các số , , ,
        - còn của apply là mảng []
        + gán cho một biến

------------------------------Biểu thức-------------------------------------
Là một khối hoặc đoạn mã mà giá trị trả về nó là một giá trị
ví dụ : a=1;
------------------------Module-------------------------------------------
              
-Khi tạo thì dùng: module.exports
-Khi gọi thì dùng: require

- Do tính chất đóng gói cửa module cũng như cách thiết kế của nodejs
nên ta không thể gọi được các đối tượng từ module khác mà không dùng module.exports
- khi require một module khác khi chạy sẽ chạy các lệnh được gọi từ module đo
- require là một hàm trong lõi của js
- cho phép thay đổi ngữ cảnh
- làm việc với đối tượng mới nhanh chóng
-tham số của call là các số , , ,
- còn của apply là mảng []


------------------------------ Debug -------------------------------------
- Variables là các biến
    
------------------------------ Hướng đối tượng là object literal -------------------------------------

-Name/Value:

    + Là một cặp tên ánh xạ với một giá trị
    + trong 1 ngữ cảnh thì Name có thể định nghĩa nhiều hơn 1 lần nhưng chỉ có 1 giá trị Value
    + Value thì có nhiều cặp Name/Value khác

- Object:

    + là tập hợp các cặp Name/Value
    + là cách định nghĩa đơn giản nhất trong JavaScript
    + các kiểu Value có thể mang: String, Number...., Object, Funtion

- Object Literal: 

    +Là cách khai báo nhanh một đối tượng trong JavaScript
    + gồm các cặp Value cách nhau = dấu ,
    vd:{
        Name:"Dương",
        Age:"21",
        Address:{
            City:"Hà Nội",
            Country:"Việt Nam"
        },
        diHoc:function(){
            console.log("di học");
        }
    }



------------------------------ hàm khởi tạo (Contructor) -------------------------------------
- cho phép thay đổi ngữ cảnh
- làm việc với đối tượng mới nhanh chóng
-tham số của call là các số , , ,
- còn của apply là mảng []
- hàm để khởi tạo mới một đối tượng
- cho phép thay đổi ngữ cảnh
- làm việc với đối tượng mới nhanh chóng
-tham số của call là các số , , ,
- còn của apply là mảng []
- nó đung this để truy cập tới các biến của đối tượng hoặc khởi tạo mới
------------------------------ kế thừa prototype -------------------------------------
    -sự kế thừa đặc biệt
    - mọi object nó đều trỏ đến prototype nên việc định nghĩa thuộc tinh prototype thì
     obj.prototype.prop cso thể được
    gọi trực tiếp obj.prop
    - prototype này cũng có thể trỏ đến prototype khác
    - obj có thể truy nhập tất cả các thuộc tính prototype

------------------------------ biến tham trị và biến tham chiếu -------------------------------------
- biến nguyên thủy: // quá trình truyền tham trị
    int a=0; nhận 1 ô nhớ
    int b=1; nhận 1ô nhớ
    truyền vào hàm b=a; thì b sẽ bằng với a nhưng lại ở ô nhớ khác
    - cho phép thay đổi ngữ cảnh
    - làm việc với đối tượng mới nhanh chóng
    -tham số của call là các số , , ,
    - còn của apply là mảng []
    khi b thay đổi thì a không bị ảnh hưởng. do nó nằm ở 2 vùng nhớ khác nhau

- truyền vào hàm 1 Object: // quá trình truyền tham chiếu
- cho phép thay đổi ngữ cảnh
- làm việc với đối tượng mới nhanh chóng
-tham số của call là các số , , ,
- còn của apply là mảng []
    Object A;
    truyền vào hàm B=A; thì cả B và A đều trỏ tới một vùng nhớ nên khi 
    - cho phép thay đổi ngữ cảnh
    - làm việc với đối tượng mới nhanh chóng
    -tham số của call là các số , , ,
    - còn của apply là mảng []
    tác động đến giá trị của B thì chũng ta cũng làm thay đổi A

------------------------------ Thực thi hàm ngay khi được khởi tạo {scope}-------------------------------------
- cho phép thay đổi ngữ cảnh
- làm việc với đối tượng mới nhanh chóng
-tham số của call là các số , , ,
- còn của apply là mảng []
// hàm này được thực thi ngay sau khi được khởi tạo,
- cho phép thay đổi ngữ cảnh
- làm việc với đối tượng mới nhanh chóng
-tham số của call là các số , , ,
- còn của apply là mảng []
// phong cách khai báo hàm nhanh và tiện cho sử dụng 1 lần và không có khả năng tái sử dụng
- cho phép thay đổi ngữ cảnh
- làm việc với đối tượng mới nhanh chóng
-tham số của call là các số , , ,
- còn của apply là mảng []
(function(thamso){ 
    console.log(thamso);
}("Truyen tham so thong qua"));


------------------------------ bên trong require -------------------------------------
đọc nội dung của file ở đường dẫn truyền vào và bọc nó với một hàm không tên
- cho phép thay đổi ngữ cảnh
- làm việc với đối tượng mới nhanh chóng
-tham số của call là các số , , ,
- còn của apply là mảng []

------------------------------ mảng trong js-------------------------------------
.....Cách 1
var name_array = new Array();
// Hoặc
var name_array = new Array(1,2,3);

.....Cách 2
var name_array = [];
// Hoặc
var name_array = [1,2,3];
....Truy xuất:
var t = new Array(1,2,3);
alert(t[0]); // kết quả là 1
alert(t[1]); // kết quả là 2
alert(t[2]); // kết quả là 3

------------------------------ JSON -------------------------------------

- bọc bởi dấu ngoặc nhọn {}
- các Key và Value thì đều nằm trong "dấu nháy kép"
- muốn sử dụng dấu nháy kép thì \"\"
- nhiều cặp Key/Value thì dùng dấu , để ngăn cách
------------------------------ sử dụng module dựng sắn -------------------------------------
- xem và tìm hiểu ở trang : https://nodejs.org/dist/latest-v6.x/docs/api/

- 

------------------------------ tính năng ES6 trong JavaScript-------------------------------------
- 3 tính năng :
    +shipping : tính năng ổ định và được bật trong nodejs
    + staged: có thể sử dụng bằng khai báo cờ
    +in progress thử nghiệm và có thể hoạt động

------------------------------ Event và EventEmitter-------------------------------------
- có 2 loại sự kiện :
    + Custem Event:
    + System Event: 
------------------------------ Cách truy cập thuộc tính của obj , array-------------------------------------

------------------------------Event Emitter -------------------------------------
    <string name="ads_banner">ca-app-pub-7062977963627166/8486433733</string>

------------------------------ Object.create, util.inherits-------------------------------------

- 1 cách để khởi tạo 1 đối tượng
- util.inherits: để tạo một kết thừa prototype từ 1 lớp khác
util.inherits( SinhVien,Person);
------------------------------  ES6 Template literal -------------------------------------
- giúp nối các chuỗi giúp ta lâp trình nhanh chóng và tiên lợi hơn
-vd :

console.log(`Tên là ${duong.name}. tuổi là ${duong.age}`);
console.log(`le
hong
xuống dòng rất nhiều chơi cả "" nữa
duopng`);

------------------------------hàm call và apply-------------------------------------
- cho phép thay đổi ngữ cảnh
- làm việc với đối tượng mới nhanh chóng
-tham số của call là các số , , ,
- còn của apply là mảng []
- khi kế thừa bằng inherits tùy mục đích ta dùng call hoặc apply

------------------------------ class trong ES6-------------------------------------
- chúng rất giống và sử dụng như java mà không cần dùn prototype
- sử dụng __proto__ để xem và so sánh thể hiện

------------------------------ code không đồng bộ trong nodejs, và hàm gọi lại callback-------------------------------------
 - function callback là một function được truyền vào  lời gọi hàm khác, 
 nó sẽ được thực thi ở một thời gian trong tương lai, sau khi hoàn tất 1 công việc nào đó
 - hầu hết API của nodejs đều hỗ trợ callback

------------------------------ buffer và stream-------------------------------------
- buffer là nơi tạm thời chứa dữ liệu đang được chuyển đi từ nơi này đến nơi khác
- kích thước của buffer luôn xác định và giới hạn bởi con số
-buffer là kiểu dữ liệu có sẵn trong nodejs như là string, date, json

-stream là một chuỗi dữ liệu đã có sẵn thông qua thời gian
- chuổi dữ liệu là các mảnh dữ liệu được ghép lại thành một dữ liệu đầy đủ
-stream là 1 EventEmitter
------------------------------ kĩ thuật pipe trong stream-------------------------------------
-pipe là cơ chế kết nối 2 stream lại với nhau, đàu ra của stream này sẽ được nối với đầu vào của stream khác
ta sẽ pipe từ readable stream sang writeable stream, cũng như đọc dc bnhiu thì sẽ ghi bấy nhiêu
- luồng ghi lúc nào cũng chậm hơn luồng đọc, trong trường hợp luồng đọc put quá nhiều mà luồng ghi k xử lý kịp
thì buffer sẽ bị tràn
- như là t dùng 1 đường ống từ luồng đọc chảy tới luồng ghi
- pipe trả về 1 pipe nên quá trình này có thể lặp đi lặp lại nhiều lần => sử dụng nhiều đường ống cho nhiều tác vụ
khác nhau

------------------------------ http -------------------------------------

------------------------------ -------------------------------------

------------------------------ -------------------------------------

------------------------------ -------------------------------------

------------------------------ -------------------------------------

------------------------------ -------------------------------------

------------------------------ -------------------------------------

























